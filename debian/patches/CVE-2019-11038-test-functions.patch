Description: functions for the test for CVE-2019-11038
 Cherry-picked from upstream commit, the functions needed for the test of the
 CVE-2019-11038 fix
Author: Mike Frysinger <vapier@gentoo.org>
Origin: upstream,
 https://github.com/libgd/libgd/commit/d6c50766ee39d96f8b9899acd6e0d358623b9812
Last-Update: 2020-03-09
--- a/tests/gdtest/gdtest.c
+++ b/tests/gdtest/gdtest.c
@@ -28,16 +28,70 @@ gdImagePtr gdTestImageFromPng(const char
 
 	FILE *fp;
 
-	fp = fopen(filename, "rb");
+        /* If the path is relative, then assume it's in the tests/ dir. */
+        if (filename[0] == '/') {
+        	fp = fopen(filename, "rb");
+		if (!fp)
+			return NULL;
+	} else
+		fp = gdTestFileOpen(filename);
 
-	if (!fp) {
-		return NULL;
-	}
 	image = gdImageCreateFromPng(fp);
 	fclose(fp);
 	return image;
 }
 
+char *gdTestFilePathV(const char *path, va_list args)
+{
+	size_t len;
+	const char *p;
+	char *file;
+	va_list args_len;
+
+	/* Figure out how much space we need. */
+	va_copy(args_len, args);
+	len = strlen(GDTEST_TOP_DIR) + 1;
+	p = path;
+	do {
+		len += strlen(p) + 1;
+	} while ((p = va_arg(args_len, const char *)) != NULL);
+	va_end(args_len);
+
+	/* Now build the path. */
+	file = malloc(len);
+	gdTestAssert(file != NULL);
+	strcpy(file, GDTEST_TOP_DIR);
+	p = path;
+	do {
+		strcat(file, "/");
+		strcat(file, p);
+	} while ((p = va_arg(args, const char *)) != NULL);
+	va_end(args);
+
+	return file;
+}
+
+char *gdTestFilePathX(const char *path, ...)
+{
+	va_list args;
+	va_start(args, path);
+	return gdTestFilePathV(path, args);
+}
+
+FILE *gdTestFileOpenX(const char *path, ...)
+{
+	va_list args;
+	FILE *fp;
+	char *file;
+
+	va_start(args, path);
+	file = gdTestFilePathV(path, args);
+	fp = fopen(file, "rb");
+	gdTestAssert(fp != NULL);
+	free(file);
+	return fp;
+}
+
 /* Compare two buffers, returning the number of pixels that are
  * different and the maximum difference of any single color channel in
  * result_ret.
--- a/tests/gdtest/gdtest.h
+++ b/tests/gdtest/gdtest.h
@@ -15,6 +15,21 @@ struct CuTestImageResult {
 /* Internal versions of assert functions -- use the public versions */
 gdImagePtr gdTestImageFromPng(const char *filename);
 
+/* Return the full path to a test file.  The path should be relative
+ * to the tests/ dir.  The caller should free the pointer when finished.
+ */
+char *gdTestFilePathV(const char *path, va_list args);
+char *gdTestFilePathX(const char *path, ...);
+#define gdTestFilePath(p)       gdTestFilePathX(p, NULL)
+#define gdTestFilePath2(p1, p2) gdTestFilePathX(p1, p2, NULL)
+
+/* Return an open (read-only) file handle to a test file.
+ * The path should be relative to the tests/ dir.
+ */
+FILE *gdTestFileOpenX(const char *path, ...);
+#define gdTestFileOpen(p)       gdTestFileOpenX(p, NULL)
+#define gdTestFileOpen2(p1, p2) gdTestFileOpenX(p1, p2, NULL)
+
 void gdTestImageDiff(gdImagePtr buf_a, gdImagePtr buf_b,
                      gdImagePtr buf_diff, CuTestImageResult *result_ret);
 
